[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flight-scheduling-analysis"
dynamic = ["version"]
description = "AI-powered flight scheduling analysis system"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Flight Analysis Team", email = "team@flightanalysis.com"}
]
maintainers = [
    {name = "Flight Analysis Team", email = "team@flightanalysis.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["flight", "scheduling", "analysis", "ai", "machine-learning", "aviation"]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pandas>=2.1.4",
    "numpy>=1.25.2",
    "scikit-learn>=1.3.2",
    "xgboost>=2.0.2",
    "tensorflow>=2.15.0",
    "streamlit>=1.28.2",
    "plotly>=5.17.0",
    "sqlalchemy>=2.0.23",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",
    "celery>=5.3.4",
    "openai>=1.3.7",
    "langchain>=0.0.350",
]
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.6.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
]
docs = [
    "sphinx>=7.1.2",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
performance = [
    "locust>=2.17.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
]

[project.urls]
Homepage = "https://github.com/flight-analysis/flight-scheduling-analysis"
Documentation = "https://flight-analysis.github.io/flight-scheduling-analysis"
Repository = "https://github.com/flight-analysis/flight-scheduling-analysis"
"Bug Tracker" = "https://github.com/flight-analysis/flight-scheduling-analysis/issues"
Changelog = "https://github.com/flight-analysis/flight-scheduling-analysis/blob/main/CHANGELOG.md"

[project.scripts]
flight-analysis = "src.cli:main"

[tool.setuptools.dynamic]
version = {attr = "src.__version__"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.toml", "*.cfg", "*.ini"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "pandas", "numpy", "sklearn"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "sklearn.*",
    "xgboost.*",
    "tensorflow.*",
    "plotly.*",
    "streamlit.*",
    "celery.*",
    "redis.*",
    "influxdb_client.*",
    "langchain.*",
    "openai.*",
]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"