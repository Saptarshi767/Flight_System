global
    daemon
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Intermediate configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-node

# Main frontend for API requests
frontend flight_api_frontend
    bind *:80
    mode http
    
    # Request rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Health check endpoint
    acl is_health_check path_beg /health
    use_backend flight_api_health if is_health_check
    
    # API endpoints
    acl is_api path_beg /api
    use_backend flight_api_backend if is_api
    
    # NLP endpoints
    acl is_nlp path_beg /nlp
    use_backend flight_api_backend if is_nlp
    
    # Data endpoints
    acl is_data path_beg /data
    use_backend flight_api_backend if is_data
    
    # Analysis endpoints
    acl is_analysis path_beg /analysis
    use_backend flight_api_backend if is_analysis
    
    # Default backend
    default_backend flight_api_backend

# Backend for API services
backend flight_api_backend
    mode http
    balance leastconn
    option httpchk GET /health
    
    # Health check configuration
    default-server check inter 10s fall 3 rise 2
    
    # API server instances
    server api-1 api-1:8000 check weight 100 maxconn 100
    server api-2 api-2:8000 check weight 100 maxconn 100
    
    # Connection and timeout settings
    timeout server 30s
    timeout connect 5s
    
    # Enable session persistence for NLP queries
    cookie SERVERID insert indirect nocache
    
    # Retry configuration
    retries 3
    option redispatch

# Dedicated backend for health checks
backend flight_api_health
    mode http
    balance roundrobin
    option httpchk GET /health
    
    server api-1 api-1:8000 check
    server api-2 api-2:8000 check

# Frontend for dashboard access
frontend flight_dashboard_frontend
    bind *:8080
    mode http
    
    # Rate limiting for dashboard
    stick-table type ip size 10k expire 60s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 10 }
    
    default_backend flight_dashboard_backend

# Backend for dashboard services
backend flight_dashboard_backend
    mode http
    balance roundrobin
    option httpchk GET /_stcore/health
    
    # Dashboard server instances
    server dashboard-1 dashboard-1:8501 check weight 100
    
    # Sticky sessions for dashboard
    cookie DASHBOARDID insert indirect nocache
    
    timeout server 60s
    timeout connect 10s

# Frontend for WebSocket connections (if needed)
frontend flight_websocket_frontend
    bind *:8081
    mode http
    
    # WebSocket upgrade handling
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_connection hdr_beg(Connection) -i upgrade
    
    use_backend flight_websocket_backend if is_websocket is_websocket_connection
    default_backend flight_api_backend

# Backend for WebSocket connections
backend flight_websocket_backend
    mode http
    balance source
    
    # WebSocket specific settings
    timeout tunnel 3600s
    timeout server 3600s
    
    server api-1 api-1:8000 check
    server api-2 api-2:8000 check

# Error handling
backend error_backend
    mode http
    errorfile 503 /etc/haproxy/errors/503.http